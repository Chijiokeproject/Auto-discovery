pipeline {
    agent any

    tools {
        terraform 'terraform' // Ensure this matches the tool configured in Jenkins
    }

    parameters {
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }

    triggers {
        pollSCM('* * * * *') // Runs every minute (for demo purposes)
    }

    environment {
        PIPENV_PATH = '/usr/local/bin' // Add this if pipenv is installed globally here
    }

    stages {
        stage('IAC Scan') {
            steps {
                script {
                    sh '''
                        export PATH=$PATH:$PIPENV_PATH
                        pip install pipenv
                        pipenv install checkov
                        pipenv run checkov -d . -o junitxml --output-file checkov-results.xml || true
                    '''
                    junit allowEmptyResults: true, testResults: 'checkov-results.xml'
                }
            }
        }

        stage('Terraform Version') {
            steps {
                sh 'terraform version'
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Format') {
            steps {
                sh 'terraform fmt --recursive'
            }
        }

        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }

        stage('Terraform Plan') {
            steps {
                sh 'terraform plan'
            }
        }

        stage('Terraform Action') {
            steps {
                script {
                    sh "terraform ${params.action} -auto-approve"
                }
            }
        }
    }

    post {
        always {
            script {
                slackSend(
                    channel: env.SLACKCHANNEL,
                    color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
                    message: "üì¶ Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed with status: ${currentBuild.result}. View: ${env.BUILD_URL}"
                )
            }
        }

        failure {
            slackSend(
                channel: env.SLACKCHANNEL,
                color: 'danger',
                message: "‚ùå Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. Check details: ${env.BUILD_URL}"
            )
        }

        success {
            slackSend(
                channel: env.SLACKCHANNEL,
                color: 'good',
                message: "‚úÖ Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' succeeded. View: ${env.BUILD_URL}"
            )
        }
    }
}
