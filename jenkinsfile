pipeline {
    agent any

    tools {
        terraform 'terraform' // Make sure this name matches the configured tool in Jenkins
    }

    environment {
        SLACKCHANNEL = '21st-april-sock-shop-project-team-2'
        SLACKCREDENTIALS = credentials('slack')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    parameters {
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Select the action to perform')
    }

    triggers {
        pollSCM('* * * * *') // Runs every minute (for demo; consider reducing frequency)
    }

    environment {
        SLACKCHANNEL = '21st-april-sock-shop-project-team-2'
        SLACKCREDENTIALS = credentials('slack')
    }

    stages {
        stage('IAC Scan') {
            steps {
                script {
                    sh 'pip install pipenv'
                    sh 'pipenv install checkov' // safer than direct run pip
                    def checkovStatus = sh(script: 'pipenv run checkov -d . -o junitxml --output-file checkov-results.xml', returnStatus: true)

                    junit allowEmptyResults: true, testResults: 'checkov-results.xml'

                    if (checkovStatus != 0) {
                        echo '‚ö†Ô∏è Checkov found issues. Proceeding anyway...'
                        // Uncomment next line to stop the pipeline on error:
                        // error 'Checkov found critical issues.'
                    }
                }
            }
        }

      stage('Terraform Version') {
          steps {
             sh 'terraform version'
           }
        }


        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Format') {
            steps {
                sh 'terraform fmt --recursive'
            }
        }

        stage('Terraform Validate') {
            steps {
                sh 'terraform validate'
            }
        }

        stage('Terraform Plan') {
            steps {
                sh 'terraform plan'
            }
        }

        stage('Terraform Action') {
            steps {
                script {
                    sh "terraform ${params.action} -auto-approve"
                }
            }
        }
    }

    post {
        always {
            script {
                slackSend(
                    channel: SLACKCHANNEL,
                    color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
                    message: "üì¶ Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed with status: ${currentBuild.result}. View: ${env.BUILD_URL}"
                )
            }
        }

        failure {
            slackSend(
                channel: SLACKCHANNEL,
                color: 'danger',
                message: "‚ùå Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. Check details: ${env.BUILD_URL}"
            )
        }

        success {
            slackSend(
                channel: SLACKCHANNEL,
                color: 'good',
                message: "‚úÖ Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' succeeded. View: ${env.BUILD_URL}"
            )
        }
    }
}

